#!/bin/bash

function update_lambda_configs_if_needed {
    cd "$1"
    for i in */
    do
        update_if_changes ${i%/}
    done
}

function update_if_changes {
    envConfigs=$(aws lambda get-function-configuration --function-name $1 --output json --query 'Environment.Variables')
    currentEnv="$(<$envConfigs))"
    incomingEnv="$(<"../$1/.env")"
    if [ "$currentEnv" != "$incomingEnv" ]
    then
        echo "Updating lambda env for $1"
        aws lambda update-function-configuration --function-name $1 --environment '{\"Variables\":$incomingEnv}'
    fi
}

function has_changes {
    functionName=$(aws lambda list-functions --query "Functions[?FunctionName == '$1'].FunctionName" --output text --region "us-east-1")
    if [[ -z "$functionName" ]] # if the lambda does not exist
    then # return true (which looks like "return")
        return
    else # else check to see if the index file has changed - TODO: make this also check package.json?
        fileContents=$(curl -s "https://raw.githubusercontent.com/charlenecoffman/definesafe-cf/main/src/Lambdas/$1/index.js")
        contentsLocation=$(aws lambda get-function --function-name $1 --query 'Code.Location')
        contentsLocation="${contentsLocation%\"}"
        contentsLocation="${contentsLocation#\"}"
        dirName="../deleteLater/$1"
        mkdir -p ../deleteLater
        mkdir $dirName
        curl -s $contentsLocation --output ${dirName}/$1_currentLambda.zip
        unzip -qq -d ${dirName} -o ${dirName}/$1_currentLambda.zip
        contentsOfLambda=$(<${dirName}/index.js)
        if [ "$fileContents" != "$contentsOfLambda" ]
        then
            return
        else
            false
        fi
    fi
}

function zip_any_with_changes {
    cd "$1"
    for i in */
    do
    if $(has_changes "${i%/}")
    then # zip it up and put in the matrix output
        (cd "$i"; zip -r "../${i%/}.zip" . -qq)
        lambdaList+=("${i%/}")
    fi
    done
}

function create_role_and_function {
    role=$(create_role $1)
    echo $role > returnObject.json
    sleep 10s
    create_lambda $1 returnObject.json $2 $3
}

function create_role {    
    if [ $1 == 'CustomAuthorizer' ]
    then
        echo $(aws iam create-role --role-name "AWSLambdaBasicExecutionRole-$1" --assume-role-policy-document file://permissions/CustomAuthRolePolicy.json --region "us-east-1");
    else
        echo $(aws iam create-role --role-name "AWSLambdaBasicExecutionRole-$1" --assume-role-policy-document file://permissions/LambdaExecutionRolePolicy.json --region "us-east-1");
    fi
}

function create_lambda {
    aws lambda create-function --function-name $1 --runtime "nodejs12.x" --role "$(jq -r '.Role.Arn' $2)" --handler "index.handler" --zip-file fileb://zips/$1.zip --region "us-east-1" --tags Solution="$3" --layers "arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension:4"
}