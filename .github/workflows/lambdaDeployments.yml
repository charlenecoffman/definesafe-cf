name: LambdaDeployments
on:
  push:
    branches: [main]

jobs:
  zipIfAnyChanges:
    runs-on: ubuntu-latest
    outputs:
        matrix: ${{steps.zipfunctions.outputs.matrix}}
    steps:
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          AWS-ACCESS-KEY-ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS-SECRET-ACCESS-KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS-REGION: us-east-1
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Zip up each function
        id: zipfunctions
        run: |
          source ./src/BashScripts/lambda-scripts
          echo "here 1"
          matrixOutput=""
          cd src/Lambdas
          for i in */
          do
            hasChanges=$(has_changes "${i%/}")
            echo "here 2"
            echo $hasChanges
            if [[ $hasChanges -eq 1 ]]
            then
              (cd "$i"; zip -r "../${i%/}.zip" . -qq)
              matrixOutput+="{\"file\":\"${i%/}\"},";
            fi
          done
          if [[ $matrixOutput != "" ]]
          then
            matrixOutput="{\"include\":[${matrixOutput}]}"
            echo "::set-output name=matrix::${matrixOutput}"
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Upload Zips to artifact container
        uses: actions/upload-artifact@master
        with:
          name: zips
          path: src/Lambdas/*.zip
      - name: Upload Permissions Docs to artifact container
        uses: actions/upload-artifact@master
        with:
          name: permissions
          path: src/Permissions/RolePolicies/*.json
  deploy:
    runs-on: ubuntu-latest
    needs: zipIfAnyChanges    
    if: ${{needs.zipIfAnyChanges.outputs.matrix != '' && fromJson(needs.zipIfAnyChanges.outputs.matrix) != '[]'}}
    strategy:
      matrix: ${{fromJson(needs.zipIfAnyChanges.outputs.matrix)}}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          AWS-ACCESS-KEY-ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS-SECRET-ACCESS-KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS-REGION: us-east-1
      - name: Check Function Existance
        run: |
          role=$(aws lambda list-functions --query 'Functions[?FunctionName == `${{matrix.file}}`].Role' --output text --region "us-east-1")
          echo "::set-env name=ROLE::$role"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Create Role & Function If Doesn't Exist
        if: env.ROLE == ''
        run: |
          if [ $matrix.file == 'CustomAuthorizer' ]
          then
            role=$(aws iam create-role --role-name "AWSLambdaBasicExecutionRole-${{ matrix.file }}" --assume-role-policy-document file://permissions/CustomAuthRolePolicy.json --region "us-east-1");
          else
            role=$(aws iam create-role --role-name "AWSLambdaBasicExecutionRole-${{ matrix.file }}" --assume-role-policy-document file://permissions/LambdaExecutionRolePolicy.json --region "us-east-1");
          fi
          echo $role > returnObject.json
          sleep 10s
          aws lambda create-function --function-name ${{matrix.file}} --runtime "nodejs12.x" --role "$(jq -r '.Role.Arn' returnObject.json)" --handler "index.handler" --zip-file fileb://zips/${{matrix.file}}.zip --region "us-east-1" --tags Solution=DefineSafe
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Update Function If Exists
        if: env.ROLE != ''
        run: aws lambda update-function-code --function-name ${{matrix.file}} --zip-file fileb://zips/${{matrix.file}}.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1