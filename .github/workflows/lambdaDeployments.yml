name: LambdaDeployments
on:
  push:
    branches: [main]

jobs:
  zipIfAnyChanges:
    runs-on: ubuntu-latest
    steps:
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          AWS-ACCESS-KEY-ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS-SECRET-ACCESS-KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS-REGION: us-east-1
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Zip up each function
        id: zipfunctions
        run: |
          the_world_is_flat=true
          # ...do something interesting...
          if [ "$the_world_is_flat" = true ] ; then
              echo 'Be careful not to fall off!'
          fi
          cd src/Lambdas
          for i in */
          do
            function=$(aws lambda list-functions --query "Functions[?FunctionName == '${i%/}']" --output json --region "us-east-1")
            # comment
            echo "what"
            echo ${[[ function -z ]]}
            echo "ever"
            # comment
            if [ $function -eq [] ]
            then
              echo "New lambda"
              (cd "$i"; zip -r "../${i%/}.zip" . -qq)
            else
              fileLastModifiedDate=$(curl -s "https://api.github.com/repos/charlenecoffman/definesafe-cf/commits?path=src/Lambdas/${i%/}/index.js&page=1&per_page=1" | jq -r '.[0].commit.committer.date')
              fileLastModifiedDate=$(date -d "$fileLastModifiedDate" +%s)
              echo $fileLastModifiedDate
              # comment
              fileMod=$(($fileLastModifiedDate % 600))
              fileDiff=$((600 - $fileMod))
              fileLastModifiedDate=$(($fileDiff + $fileLastModifiedDate))
              # comment
              lambdaLastModifiedDate=$function.LastModified
              lambdaLastModifiedDate="${lambdaLastModifiedDate//\"/}"
              lambdaLastModifiedDate=$(date -d "$lambdaLastModifiedDate" +%s)
              # comment
              lamMod=$(($lambdaLastModifiedDate % 600))
              lamDiff=$((600 - $lamMod))
              lambdaLastModifiedDate=$(($lamDiff + $lambdaLastModifiedDate))
              echo "Got here"
              # if file last modified is after last lambda update, then add zip to matrix
              if [[ $fileLastModifiedDate -gt $lambdaLastModifiedDate ]]
              then
                echo "Got here 1"
                (cd "$i"; zip -r "../${i%/}.zip" . -qq)
              fi
            fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Upload Zips to artifact container
        uses: actions/upload-artifact@master
        with:
          name: zips
          path: src/Lambdas/*.zip
  createMatrix:
    runs-on: ubuntu-latest
    needs: zipIfAnyChanges
    outputs:
      matrix: ${{steps.jsonMatrixOutput.outputs.matrix}}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Json Matrix Output
        id: jsonMatrixOutput
        run: |
          if [ -d artifacts/zip ]; then
            matrixOutput="{\"include\":["
            cd artifacts/zips && for i in ./*; do
              f=$(echo "${i##*/}");
              filename=$(echo $f| cut  -d'.' -f 1);
              matrixOutput+="{\"file\":\"${filename}\"},";
            done
            matrixOutput+="]}"
            echo "::set-output name=matrix::${matrixOutput}"
          else
            matrixOuput=''
          fi
  deploy:
    runs-on: ubuntu-latest
    needs: createMatrix    
    if: ${{needs.createMatrix.outputs.matrix != '' && fromJson(needs.createMatrix.outputs.matrix) != '[]'}}
    strategy:
      matrix: ${{fromJson(needs.createMatrix.outputs.matrix)}}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          AWS-ACCESS-KEY-ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS-SECRET-ACCESS-KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS-REGION: us-east-1
      - name: Check Function Existance
        run: |
          role=$(aws lambda list-functions --query 'Functions[?FunctionName == `${{matrix.file}}`].Role' --output text --region "us-east-1")
          echo "::set-env name=ROLE::$role"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Create Role & Function If Doesn't Exist
        if: env.ROLE == ''
        run: |
          echo "{\"Version\": \"2012-10-17\",\"Statement\": [{\"Effect\": \"Allow\", \"Action\": \"sts:AssumeRole\", \"Principal\": {\"Service\": \"lambda.amazonaws.com\"}}]}" > policyJson.json
          role=$(aws iam create-role --role-name "AWSLambdaBasicExecutionRole-${{ matrix.file }}" --assume-role-policy-document file://policyJson.json --region "us-east-1");
          echo $role > returnObject.json
          sleep 10s
          aws lambda create-function --function-name ${{matrix.file}} --runtime "nodejs12.x" --role "$(jq -r '.Role.Arn' returnObject.json)" --handler "index.handler" --zip-file fileb://zips/${{matrix.file}}.zip --region "us-east-1" --tags Solution=DefineSafe
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Update Function If Exists
        if: env.ROLE != ''
        run: aws lambda update-function-code --function-name ${{matrix.file}} --zip-file fileb://zips/${{matrix.file}}.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1