name: PermissionsDeployment
on:
  push:
    branches: [main]
  # workflow_run:
    # workflows: ["CFDeployments"]
    # branches: [main]
    # types: 
    #   - completed

jobs:
  createMatrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{steps.jsonMatrixOutput.outputs.matrix}}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Json Matrix Output
        id: jsonMatrixOutput
        run: |
          matrixOutput="{\"include\":["
          cd src/Permissions/Lambdas && for i in ./*; do
            f=$(echo "${i##*/}");
            filename=$(echo $f| cut  -d'.' -f 1);
            matrixOutput+="{\"lambdaName\":\"${filename}\"},";
          done
          matrixOutput+="]}"
          echo "::set-output name=matrix::${matrixOutput}"
          else
            matrixOuput=''
          fi
  addPermissionsToCreatePlan:
    runs-on: ubuntu-18.04
    needs: createMatrix
    if: ${{needs.createMatrix.outputs.matrix != '' && fromJson(needs.createMatrix.outputs.matrix) != '[]'}}
    strategy:
      matrix: ${{fromJson(needs.createMatrix.outputs.matrix)}}
    steps:
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          AWS-ACCESS-KEY-ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS-SECRET-ACCESS-KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS-REGION: us-east-1
      - name: Check Policy Existance
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          policy=$(aws iam list-policies --query 'Policies[?PolicyName == "${{matrix.lambdaName}}Permissions"].Arn' --output text --region "us-east-1")
          echo "::set-env name=POLICY::$policy"
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Create Plan Permissions If Does Not Exist
        if: env.POLICY == ''
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          policy=$(aws iam create-policy --policy-name ${{matrix.lambdaName}} --policy-document file://src/Permissions/Lambdas/${{matrix.lambdaName}}Permissions.json --tags Key=Solution,Value=DefineSafe)
          echo $policy > returnObject.json
          sleep 10s
          aws iam attach-role-policy --role-name "AWSLambdaBasicExecutionRole-${{matrix.lambdaName}}" --policy-arn "$(jq -r '.Policy.Arn' returnObject.json)"