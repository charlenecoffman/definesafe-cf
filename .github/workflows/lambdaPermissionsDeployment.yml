name: PermissionsDeployment
on:
  push:
    branches: [main]
  # workflow_run:
  #   workflows: ["CFDeployments"]
  #   branches: [main]
  #   types: 
  #     - completed

jobs:
  createMatrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{steps.jsonMatrixOutput.outputs.matrix}}
    steps:
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          AWS-ACCESS-KEY-ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS-SECRET-ACCESS-KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS-REGION: us-east-1
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Json Matrix Output
        id: jsonMatrixOutput
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          matrixOutput="{\"include\":["
          cd src/Permissions/Lambdas 
          for i in ./*
          do
            minutesOfMarginInSeconds=600
            f=$(echo "${i##*/}");
            filename=$(echo $f| cut  -d'.' -f 1);
            lastUpdated=$(aws iam list-policies --query "Policies[?PolicyName == '${filename}Permissions'].UpdateDate" --output text --region "us-east-1")
            echo "$lastUpdated"
            if [[ -z "$lastUpdated" ]]
            then
              matrixOutput+="{\"lambdaName\":\"${filename}\"},";
            else
              fileLastModifiedDate=$(curl -s "https://api.github.com/repos/charlenecoffman/definesafe-cf/commits?path=src/Permissions/Lambdas/${filename}.json&page=1&per_page=1" | jq -r '.[0].commit.committer.date')
              fileLastModifiedDate=$(date -d "$fileLastModifiedDate" +%s)
              fileMod=$(($fileLastModifiedDate % $minutesOfMarginInSeconds))
              fileDiff=$(($minutesOfMarginInSeconds - $fileMod))
              fileLastModifiedDate=$(($fileDiff + $fileLastModifiedDate))
              policyLastUpdatedDate="${lastUpdated//\"/}"
              policyLastUpdatedDate=$(date -d "$policyLastUpdatedDate" +%s)
              lamMod=$(($policyLastUpdatedDate % $minutesOfMarginInSeconds))
              lamDiff=$(($minutesOfMarginInSeconds - $lamMod))
              policyLastUpdatedDate=$(($lamDiff + $policyLastUpdatedDate))
              echo $fileLastModifiedDate
              echo $policyLastUpdatedDate
              if [[ $fileLastModifiedDate -gt $policyLastUpdatedDate ]]
              then
                echo "Yeah here something"
                matrixOutput+="{\"lambdaName\":\"${filename}\"},";
              fi
            fi
          done
          if [[ ${matrixOutput} != "{\"include\":[" ]]
          then
            matrixOutput+="]}"
          else
            matrixOutput=''
          fi
          echo "::set-output name=matrix::${matrixOutput}"
  deployPermissions:
    runs-on: ubuntu-18.04
    needs: createMatrix
    if: ${{needs.createMatrix.outputs.matrix != '' && fromJson(needs.createMatrix.outputs.matrix) != '[]'}}
    strategy:
      matrix: ${{fromJson(needs.createMatrix.outputs.matrix)}}
    steps:
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          AWS-ACCESS-KEY-ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS-SECRET-ACCESS-KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS-REGION: us-east-1
      - name: Check Policy Existance
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          policy=$(aws iam list-policies --query "Policies[?PolicyName == '${{matrix.lambdaName}}Permissions'].Arn" --output text --region "us-east-1")
          echo "::set-env name=POLICY::$policy"
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Create Plan Permissions If Does Not Exist
        if: env.POLICY == ''
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          policy=$(aws iam create-policy --policy-name "${{matrix.lambdaName}}Permissions" --policy-document file://src/Permissions/Lambdas/${{matrix.lambdaName}}.json --tags Key=Solution,Value=DefineSafe)
          echo $policy > returnObject.json
          sleep 10s
          aws iam attach-role-policy --role-name "AWSLambdaBasicExecutionRole-${{matrix.lambdaName}}" --policy-arn "$(jq -r '.Policy.Arn' returnObject.json)"
      - name: Update Plan Permissions If It Exists
        if: env.POLICY != ''
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "starting"
          versions=$(aws iam list-policy-versions --query "Versions[*].VersionId" --policy-arn ${{env.POLICY}} --output json)
          echo "versions prints below"
          echo $versions
          echo $(jq '.[] | length' version)
          echo "after versions prints"
          aws iam create-policy-version --policy-arn ${{env.POLICY}} --policy-document file://src/Permissions/Lambdas/${{matrix.lambdaName}}.json --set-as-default
          echo "after create policy version"