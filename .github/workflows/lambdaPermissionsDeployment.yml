name: PermissionsDeployment
on:
  workflow_run:
    workflows: ["CFDeployments"]
    branches: [main]
    types: 
      - completed

jobs:
  createMatrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{steps.jsonMatrixOutput.outputs.matrix}}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Json Matrix Output
        id: jsonMatrixOutput
        run: |
          matrixOutput="{\"include\":["
          cd src/Permissions/Lambdas 
          for i in ./*
          do
            f=$(echo "${i##*/}");
            filename=$(echo $f| cut  -d'.' -f 1);
            lastUpdated=$(aws iam list-policies --query "Policies[?PolicyName == '${{matrix.lambdaName}}Permissions'].UpdateDate" --output text --region "us-east-1")
            if [[ -z "$lastUpdated" ]]
            then
              matrixOutput+="{\"lambdaName\":\"${filename}\"},";
            else
              fileLastModifiedDate=$(curl -s "https://api.github.com/repos/charlenecoffman/definesafe-cf/commits?path=src/Permissions/Lambdas/${filename}.json&page=1&per_page=1" | jq -r '.[0].commit.committer.date')
              fileLastModifiedDate=$(date -d "$fileLastModifiedDate" +%s)
              fileMod=$(($fileLastModifiedDate % 600))
              fileDiff=$((600 - $fileMod))
              fileLastModifiedDate=$(($fileDiff + $fileLastModifiedDate))
              policyLastUpdatedDate="${lastUpdated//\"/}"
              policyLastUpdatedDate=$(date -d "$policyLastUpdatedDate" +%s)
              lamMod=$(($policyLastUpdatedDate % 600))
              lamDiff=$((600 - $lamMod))
              policyLastUpdatedDate=$(($lamDiff + $policyLastUpdatedDate))
              if [[ $fileLastModifiedDate -gt $policyLastUpdatedDate ]]
              then
                f=$(echo "${i##*/}");
                filename=$(echo $f| cut  -d'.' -f 1);
                matrixOutput+="{\"lambdaName\":\"${filename}\"},";
              else
                matrixOutput='';
              fi
            fi
          done
          if matrixOutput != ''
          then
            matrixOutput+="]}"
          fi
          echo "::set-output name=matrix::${matrixOutput}"
  addPermissions:
    runs-on: ubuntu-18.04
    needs: createMatrix
    if: ${{needs.createMatrix.outputs.matrix != '' && fromJson(needs.createMatrix.outputs.matrix) != '[]'}}
    strategy:
      matrix: ${{fromJson(needs.createMatrix.outputs.matrix)}}
    steps:
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          AWS-ACCESS-KEY-ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS-SECRET-ACCESS-KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS-REGION: us-east-1
      - name: Check Policy Existance
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          policy=$(aws iam list-policies --query "Policies[?PolicyName == '${{matrix.lambdaName}}Permissions'].Arn" --output text --region "us-east-1")
          echo "::set-env name=POLICY::$policy"
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Create Plan Permissions If Does Not Exist
        if: env.POLICY == ''
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          policy=$(aws iam create-policy --policy-name "${{matrix.lambdaName}}Permissions" --policy-document file://src/Permissions/Lambdas/${{matrix.lambdaName}}.json --tags Key=Solution,Value=DefineSafe)
          echo $policy > returnObject.json
          sleep 10s
          aws iam attach-role-policy --role-name "AWSLambdaBasicExecutionRole-${{matrix.lambdaName}}" --policy-arn "$(jq -r '.Policy.Arn' returnObject.json)"